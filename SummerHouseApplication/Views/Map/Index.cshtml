@model SummerHouse

<div id="map" class="container">
    <h1>Testing GMAP</h1>
    <div id="googleMap" style="width:100%;height:400px;">
    </div>
    <button id="restore-marker" class="map-button button-hidden">
        <img src="~/images/restore.svg" />
    </button>
    <button id="done-drawing" class="map-button button-hidden">
        <img src="~/images/done.svg" />
    </button>
</div>
<div id="action-select-modal" class="modal bottom-sheet">
    <div class="container">
        <div class="modal-content">
            <h4>Valitse toiminto</h4>
            <div id="fish-marker" class="row modal-action" style="border:1px solid #808080; padding:1em;">
                <div class="col s2">
                    @* for some reason only inline styles working. TODO: FIX THIS *@
                    <img style="position:relative; width:100%; top:5px; height:3em; width:3em;"
                         src="~/images/fish.svg" />
                </div>
                <div class="col s4">
                    <p>Sijoita saaliin sijainti kartalle</p>
                </div>
                <div id="rod-select-container" class="input-field col s3">
                    <select id="rod-select">
                        <option value="" disabled selected>Valitse kalastusväline</option>
                        <option value="1">Onki</option>
                        <option value="2">Virveli</option>
                        <option value="3">Katiska</option>
                    </select>
                    <label>Materialize Select</label>
                </div>
                <div id="fish-select-container" class="input-field col s3" style="height: 150px; overflow-y:auto;">
                    <select id="fish-select" >
                        <option value="" disabled selected>Valitse kala</option>
                        <option value="1">Ahven</option>
                        <option value="2">Hauki</option>
                        <option value="3">Särki</option>
                        <option value="4">Lohi</option>
                        <option value="5">Kuha</option>
                        <option value="6">Lahna</option>
                        <option value="7">Made</option>
                    </select>
                    <label>Materialize Select</label>
                </div>
            </div>
            <div id="cottage-marker" class="row modal-action" style="border:1px solid #808080; padding:1em;">
                <div class="col s2">
                    @* for some reason only inline styles working. TODO: FIX THIS *@
                    <img style="position:relative; width:100%; top:5px; height:3em; width:3em;"
                         src="~/images/Icon_Cabin.png" />
                </div>
                <div class="col s6">
                    <p>Sijoita mökin sijainti kartalle</p>
                </div>
            </div>
            <div id="net-marker" class="row modal-action" style="border:1px solid #808080; padding:1em;">
                <div class="col s2">
                    @* for some reason only inline styles working. TODO: FIX THIS *@
                    <img style="position:relative; width:100%; top:5px; height:3em; width:3em;"
                         src="~/images/fishing-net.png" />
                </div>
                <div class="col s6">
                    <p>Piirrä verkko kartalle</p>
                </div>
            </div>
        </div>
    </div>

    <div class="modal-footer">
        <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Sulje</a>
    </div>
</div>
<div class="fixed-action-btn">
    <a class="btn-floating btn-large brown lighten-2" href="~/summerhouse">
        <i class="large material-icons">arrow_back</i>
    </a>
</div>
<script>
    // Array of coordinates for polyline. This is reseted after polyline is "done".
    var markerCoords = [];
    // Array of markers for polyline. This is reseted after polyline is "done".
    var markers = [];
    // Latest polyline which is drawn.
    var latestPolyline;
    // Generated map.
    var gmap;
    // Geocoder so we can get lat and lng from address.
    var geocoder;
    // 0 is that we don't mark anything to map
    // 1 is when we want to place just a marker
    // 2 is when we want to draw polyline
    var activeFunctionality = 0;

    // Latest click on map saves coordinates to this global variable.
    // we also need global variable to check if user is still drawing
    // or not
    var latestCoords;
    var isDrawing = false;
    // Click functions for each button.
    $(document).ready(function () {

        $('.modal').modal();

        $('#fish-select').material_select();
        $('#rod-select').material_select();

        $("#fish-select-container").click(function (event) {
            event.stopPropagation();
            // Do something
        });
        $("#rod-select-container").click(function (event) {
            event.stopPropagation();
            // Do something
        });
        $('#fish-marker').click(function () {
            activeFunctionality = 1;
            $('.modal').modal('close');
            placeMarker(latestCoords);
        });

        $('#net-marker').click(function () {

            activeFunctionality = 2;
            // Enable extra functionality when we are making net marking.
            $('#restore-marker').addClass("button-visible");
            $('#done-drawing').addClass("button-visible");

            $('.modal').modal('close');

            isDrawing = true;
            placeMarker(latestCoords);
        });

        $('#cottage-marker').click(function () {
            activeFunctionality = 3;
            $('.modal').modal('close');
            placeMarker(latestCoords);
        })
        // This button is for removing latest drawn polyline. If user is making fishing net and accidentally
        // clicks wrong place on map, this button removes that line and draws latest again.
        $('#restore-marker').click(function () {
            if (markerCoords.length > 0) {
                markerCoords.pop();
                markers.pop().setMap(null);
                latestPolyline = drawPolylinesOnMap(markerCoords, gmap);
            }
        });
        $('#done-drawing').click(function () {
            isDrawing = false;
            resetActiveButton();
            activeFunctionality = 0;
            placeMarker(latestCoords);
        });
    });
    // Deactivate all buttons and hide extra functionality button.
    function resetActiveButton() {

        $('#done-drawing').removeClass("button-visible");
        $('#done-drawing').addClass("button-hidden");
        $('#restore-marker').removeClass("button-visible");
        $('#restore-marker').addClass("button-hidden");

    }
    // Function for drawing polyline on map.
    function drawPolylinesOnMap(coordinatesArray, map) {

        var fishingNet = new google.maps.Polyline({
            path: coordinatesArray,
            strokeColor: "#0000FF",
            strokeOpacity: 0.8,
            strokeWeight: 2
        });
        // remove latest polyline so we are not stacking multiple polylines on top of each other.
        if (typeof (latestPolyline) !== "undefined") {
            latestPolyline.setMap(null);
        }

        fishingNet.setMap(map);
        return fishingNet;
    }

    function PlaceMarkerOnMap(map, lat, lng, imagePath) {

        var iconImage = {
            url: imagePath,
            scaledSize: new google.maps.Size(32, 32),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(16, 16),
        };

        var myLatLng =
            {
                lat: parseFloat(lat),
                lng: parseFloat(lng)
            };

        var marker = new google.maps.Marker({
            position: myLatLng,
            map: map,
            icon: iconImage
        });
    }

    function setLatestClickCoordinatesOnMap(coords) {
        latestCoords = coords;
    }

    function initMap(centerLocation) {
        var mapProp = {
            zoom: 15,
            center: centerLocation
        }
        var map = new google.maps.Map(document.getElementById("googleMap"), mapProp);
        // we need to make a global variable of map. This could be do otherwise but map
        // should be accessible in click functions also.
        gmap = map;

        map.addListener('click', function (event) {
            //placeMarker(event.latLng);
            latestCoords = event.latLng;
            if (!isDrawing) {
                $('#action-select-modal').modal('open');
            }
            else {
                placeMarker(event.latLng);
            }
        });

        return map;
    }

    function placeMarker(location) {

            // If we are doing something else than fishing net.
            // Reset fishing net coords and markers, so next time we make a net
            // last one is not modified.
        console.log(location);
            if (activeFunctionality !== 2) {
                markerCoords = [];
                markers = [];
                if (latestPolyline) {
                    latestPolyline = new google.maps.Polyline({
                        path: [],
                        strokeColor: "#0000FF",
                        strokeOpacity: 0.8,
                        strokeWeight: 2
                    });
                }
            }
            // If user is doing something else than just scrolling on map.
            // If user is just marking single spots, just add marker. Otherwise add markers and coordinates
            // to array so polyline can be drawn.
            if (activeFunctionality !== 0) {

                var iconImage;
                var markerTitle = "Kalapaikka";
                var contentString = "Placeholder string for infowindow content.";

                if (activeFunctionality === 1) {
                    iconImage = {
                        url: '../images/fishmarker.png',
                        scaledSize: new google.maps.Size(32, 32),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(16, 16),
                    };
                    contentString = "Täältä on tullut kalaa virvelillä";
                }
                else if (activeFunctionality === 2) {
                    iconImage = {
                        url: '../images/fishing-net.png',
                        scaledSize: new google.maps.Size(24, 24),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(12, 12),
                    };
                    markerTitle = "Verkko";
                    contentString = "Verkoilla";
                }
                else if (activeFunctionality === 3) {
                    iconImage = {
                        url: '../images/Icon_Cabin.png',
                        scaledSize: new google.maps.Size(24, 24),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(12, 12),
                    };
                    markerTitle = "Mökki";
                    contentString = "Mökin sijainti, kartan keskipiste.";
                }
                var infowindow = new google.maps.InfoWindow({
                    content: contentString
                });

                var marker = new google.maps.Marker({
                    position: location,
                    map: gmap,
                    icon: iconImage,
                    title: markerTitle
                });

                marker.addListener('click', function () {
                    infowindow.open(gmap, marker);
                });

                // 2 means polyline
                if (activeFunctionality === 2) {
                    console.log("drawing polyline");
                    markers.push(marker);
                    markerCoords.push({
                        lat: marker.position.lat(),
                        lng: marker.position.lng()
                    });

                    for (var i = 0; i < markerCoords.length; i++) {

                        if (markerCoords.length > 1) {
                            latestPolyline = drawPolylinesOnMap(markerCoords, gmap);
                        }
                    }
                }
                // 3 means that user saves cottage location so this is loaded when
                // map is loaded.
                else if (activeFunctionality === 3) {
                    var locationObj =
                        {
                            Latitude: location.lat(),
                            Longitude: location.lng()
                        };
                    $.ajax({
                        method: "POST",
                        contentType: "application/json",
                        url: "/map/location/@Model.Id",
                        data: JSON.stringify(locationObj)
                    })
                }
            }
        }


    // Initialize map.
    function myMap() {


        var locationObject = {
            savedLatitude: "@Model.LocationOnMap?.Latitude",
            savedLongitude: "@Model.LocationOnMap?.Longitude"
        };

        // Is summehouse has a user defined location. Else we use address.
        if (locationObject.savedLatitude && locationObject.savedLongitude) {

            var myLatLng =
                {
                    lat: parseFloat(locationObject.savedLatitude),
                    lng: parseFloat(locationObject.savedLongitude)
                };
            console.log(myLatLng)
            var map = initMap(myLatLng);
            PlaceMarkerOnMap(map, locationObject.savedLatitude, locationObject.savedLongitude, "../images/Icon_Cabin.png");
        }
        else {

            var address = "@(Html.Raw(Model.Address)), @(Model.City), @(Model.PostalCode)";
            console.log(address);
            geocoder = new google.maps.Geocoder();
            geocoder.geocode({
                'address': "@(Html.Raw(Model.Address)), @(Model.City), @(Model.PostalCode)"
            }, function (results, status) {

                    if (status == google.maps.GeocoderStatus.OK) {
                        initMap(results[0].geometry.location);
                    }
                });
        }
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDgpn0Z1ryQ3wukpuD8vBKvEL5GDGBWtb4&callback=myMap"></script>
